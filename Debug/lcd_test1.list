
lcd_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005bc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000750  08000750  00010750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000760  08000760  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000760  08000760  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000760  08000760  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000760  08000760  00010760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000764  08000764  00010764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000008  08000770  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000770  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007e1  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001f3  00000000  00000000  00020819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00020a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000090  00000000  00000000  00020ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e522  00000000  00000000  00020b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000095f  00000000  00000000  0002f06a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00052979  00000000  00000000  0002f9c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00082342  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000020c  00000000  00000000  00082394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000738 	.word	0x08000738

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	08000738 	.word	0x08000738

080001d4 <delay_ms>:
#define LCD_DB5(_signal) DIGITAL_WRITE(GPIOB, PIN6, _signal)
#define LCD_DB6(_signal) DIGITAL_WRITE(GPIOA, PIN7, _signal)
#define LCD_DB7(_signal) DIGITAL_WRITE(GPIOA, PIN6, _signal)

void delay_ms(int ms)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 80001dc:	4b11      	ldr	r3, [pc, #68]	; (8000224 <delay_ms+0x50>)
 80001de:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80001e2:	605a      	str	r2, [r3, #4]

	SysTick->VAL = 0;
 80001e4:	4b0f      	ldr	r3, [pc, #60]	; (8000224 <delay_ms+0x50>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	609a      	str	r2, [r3, #8]

	SysTick->CTRL = SYSTICK_CTRL_ENABLE | SYSTICK_CTRL_CLKSRC;
 80001ea:	4b0e      	ldr	r3, [pc, #56]	; (8000224 <delay_ms+0x50>)
 80001ec:	2205      	movs	r2, #5
 80001ee:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < ms; i++)
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e009      	b.n	800020a <delay_ms+0x36>
	{
		while((SysTick->CTRL & SYSTICK_CTRL_COUNTFLAG) == 0){}
 80001f6:	bf00      	nop
 80001f8:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <delay_ms+0x50>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000200:	2b00      	cmp	r3, #0
 8000202:	d0f9      	beq.n	80001f8 <delay_ms+0x24>
	for(int i = 0; i < ms; i++)
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	3301      	adds	r3, #1
 8000208:	60fb      	str	r3, [r7, #12]
 800020a:	68fa      	ldr	r2, [r7, #12]
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	429a      	cmp	r2, r3
 8000210:	dbf1      	blt.n	80001f6 <delay_ms+0x22>
	}
	SysTick->CTRL = 0;
 8000212:	4b04      	ldr	r3, [pc, #16]	; (8000224 <delay_ms+0x50>)
 8000214:	2200      	movs	r2, #0
 8000216:	601a      	str	r2, [r3, #0]
}
 8000218:	bf00      	nop
 800021a:	3714      	adds	r7, #20
 800021c:	46bd      	mov	sp, r7
 800021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000222:	4770      	bx	lr
 8000224:	e000e010 	.word	0xe000e010

08000228 <PIN_MODE>:
PIN14 = 14,
PIN15 = 15,
}PIN_NUMBER;

void PIN_MODE(PORT_LETTER port_num, PIN_NUMBER pin_num, MODE mode)
{
 8000228:	b480      	push	{r7}
 800022a:	b087      	sub	sp, #28
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
 8000232:	460b      	mov	r3, r1
 8000234:	71bb      	strb	r3, [r7, #6]
 8000236:	4613      	mov	r3, r2
 8000238:	717b      	strb	r3, [r7, #5]

	int pin_bit1 = pin_num * 2;
 800023a:	79bb      	ldrb	r3, [r7, #6]
 800023c:	005b      	lsls	r3, r3, #1
 800023e:	613b      	str	r3, [r7, #16]
	int pin_bit2 = pin_bit1 + 1;
 8000240:	693b      	ldr	r3, [r7, #16]
 8000242:	3301      	adds	r3, #1
 8000244:	60fb      	str	r3, [r7, #12]


	RCC->AHB1ENR |= (1U<<port_num); // Enable Clock access to the Port
 8000246:	4b2e      	ldr	r3, [pc, #184]	; (8000300 <PIN_MODE+0xd8>)
 8000248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
 8000252:	492b      	ldr	r1, [pc, #172]	; (8000300 <PIN_MODE+0xd8>)
 8000254:	4313      	orrs	r3, r2
 8000256:	630b      	str	r3, [r1, #48]	; 0x30

	GPIO_TypeDef *GPIO_PORT;
	switch(port_num)
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	2b04      	cmp	r3, #4
 800025c:	d81b      	bhi.n	8000296 <PIN_MODE+0x6e>
 800025e:	a201      	add	r2, pc, #4	; (adr r2, 8000264 <PIN_MODE+0x3c>)
 8000260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000264:	08000279 	.word	0x08000279
 8000268:	0800027f 	.word	0x0800027f
 800026c:	08000285 	.word	0x08000285
 8000270:	0800028b 	.word	0x0800028b
 8000274:	08000291 	.word	0x08000291
	{
	case PORT_A: GPIO_PORT = GPIOA; break;
 8000278:	4b22      	ldr	r3, [pc, #136]	; (8000304 <PIN_MODE+0xdc>)
 800027a:	617b      	str	r3, [r7, #20]
 800027c:	e00b      	b.n	8000296 <PIN_MODE+0x6e>
	case PORT_B: GPIO_PORT = GPIOB; break;
 800027e:	4b22      	ldr	r3, [pc, #136]	; (8000308 <PIN_MODE+0xe0>)
 8000280:	617b      	str	r3, [r7, #20]
 8000282:	e008      	b.n	8000296 <PIN_MODE+0x6e>
	case PORT_C: GPIO_PORT = GPIOC; break;
 8000284:	4b21      	ldr	r3, [pc, #132]	; (800030c <PIN_MODE+0xe4>)
 8000286:	617b      	str	r3, [r7, #20]
 8000288:	e005      	b.n	8000296 <PIN_MODE+0x6e>
	case PORT_D: GPIO_PORT = GPIOD; break;
 800028a:	4b21      	ldr	r3, [pc, #132]	; (8000310 <PIN_MODE+0xe8>)
 800028c:	617b      	str	r3, [r7, #20]
 800028e:	e002      	b.n	8000296 <PIN_MODE+0x6e>
	case PORT_E: GPIO_PORT = GPIOE; break;
 8000290:	4b20      	ldr	r3, [pc, #128]	; (8000314 <PIN_MODE+0xec>)
 8000292:	617b      	str	r3, [r7, #20]
 8000294:	bf00      	nop
	}

	if(mode == INPUT)
 8000296:	797b      	ldrb	r3, [r7, #5]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d114      	bne.n	80002c6 <PIN_MODE+0x9e>
	{
		GPIO_PORT->MODER &=~(1U<<pin_bit1);
 800029c:	697b      	ldr	r3, [r7, #20]
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	2101      	movs	r1, #1
 80002a2:	693b      	ldr	r3, [r7, #16]
 80002a4:	fa01 f303 	lsl.w	r3, r1, r3
 80002a8:	43db      	mvns	r3, r3
 80002aa:	401a      	ands	r2, r3
 80002ac:	697b      	ldr	r3, [r7, #20]
 80002ae:	601a      	str	r2, [r3, #0]
		GPIO_PORT->MODER &=~(1U<<pin_bit2);
 80002b0:	697b      	ldr	r3, [r7, #20]
 80002b2:	681a      	ldr	r2, [r3, #0]
 80002b4:	2101      	movs	r1, #1
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	fa01 f303 	lsl.w	r3, r1, r3
 80002bc:	43db      	mvns	r3, r3
 80002be:	401a      	ands	r2, r3
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	601a      	str	r2, [r3, #0]
	{
		GPIO_PORT->MODER |= (1U<<pin_bit1);
		GPIO_PORT->MODER &=~(1U<<pin_bit2);
	}

}
 80002c4:	e015      	b.n	80002f2 <PIN_MODE+0xca>
	else if (mode == OUTPUT)
 80002c6:	797b      	ldrb	r3, [r7, #5]
 80002c8:	2b01      	cmp	r3, #1
 80002ca:	d112      	bne.n	80002f2 <PIN_MODE+0xca>
		GPIO_PORT->MODER |= (1U<<pin_bit1);
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	2101      	movs	r1, #1
 80002d2:	693b      	ldr	r3, [r7, #16]
 80002d4:	fa01 f303 	lsl.w	r3, r1, r3
 80002d8:	431a      	orrs	r2, r3
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	601a      	str	r2, [r3, #0]
		GPIO_PORT->MODER &=~(1U<<pin_bit2);
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	2101      	movs	r1, #1
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	fa01 f303 	lsl.w	r3, r1, r3
 80002ea:	43db      	mvns	r3, r3
 80002ec:	401a      	ands	r2, r3
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	601a      	str	r2, [r3, #0]
}
 80002f2:	bf00      	nop
 80002f4:	371c      	adds	r7, #28
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40023800 	.word	0x40023800
 8000304:	40020000 	.word	0x40020000
 8000308:	40020400 	.word	0x40020400
 800030c:	40020800 	.word	0x40020800
 8000310:	40020c00 	.word	0x40020c00
 8000314:	40021000 	.word	0x40021000

08000318 <DIGITAL_WRITE>:

void DIGITAL_WRITE(GPIO_TypeDef *port, PIN_NUMBER pin, SIGNAL signal)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	460b      	mov	r3, r1
 8000322:	70fb      	strb	r3, [r7, #3]
 8000324:	4613      	mov	r3, r2
 8000326:	70bb      	strb	r3, [r7, #2]
	if(signal == LOW)
 8000328:	78bb      	ldrb	r3, [r7, #2]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d106      	bne.n	800033c <DIGITAL_WRITE+0x24>
	{
		/* BR(y) BIT RESET, When this bit is set to 1, it will
		 * RESET the corresponding ODRx Bit
		 * When set to 0, nothing happens.*/
		port->BSRR = (1U<<(pin + 16));
 800032e:	78fb      	ldrb	r3, [r7, #3]
 8000330:	3310      	adds	r3, #16
 8000332:	2201      	movs	r2, #1
 8000334:	409a      	lsls	r2, r3
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	619a      	str	r2, [r3, #24]
		/* BS(y) BIT SET, When this bit is set to 1, it will
		 * SET the corresponding ODRx Bit
		 * When set to 0, nothing happens.*/
		port->BSRR = (1U<<pin);
	}
}
 800033a:	e007      	b.n	800034c <DIGITAL_WRITE+0x34>
	else if (signal == HIGH)
 800033c:	78bb      	ldrb	r3, [r7, #2]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d104      	bne.n	800034c <DIGITAL_WRITE+0x34>
		port->BSRR = (1U<<pin);
 8000342:	78fb      	ldrb	r3, [r7, #3]
 8000344:	2201      	movs	r2, #1
 8000346:	409a      	lsls	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	619a      	str	r2, [r3, #24]
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr

08000358 <peripherals_init>:
{
	return (port->IDR & (1U<<pin));
}

void peripherals_init()
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOAEN;
 800035c:	4b28      	ldr	r3, [pc, #160]	; (8000400 <peripherals_init+0xa8>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000360:	4a27      	ldr	r2, [pc, #156]	; (8000400 <peripherals_init+0xa8>)
 8000362:	f043 0301 	orr.w	r3, r3, #1
 8000366:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= GPIOBEN;
 8000368:	4b25      	ldr	r3, [pc, #148]	; (8000400 <peripherals_init+0xa8>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036c:	4a24      	ldr	r2, [pc, #144]	; (8000400 <peripherals_init+0xa8>)
 800036e:	f043 0302 	orr.w	r3, r3, #2
 8000372:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= GPIOCEN;
 8000374:	4b22      	ldr	r3, [pc, #136]	; (8000400 <peripherals_init+0xa8>)
 8000376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000378:	4a21      	ldr	r2, [pc, #132]	; (8000400 <peripherals_init+0xa8>)
 800037a:	f043 0304 	orr.w	r3, r3, #4
 800037e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= GPIODEN;
 8000380:	4b1f      	ldr	r3, [pc, #124]	; (8000400 <peripherals_init+0xa8>)
 8000382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000384:	4a1e      	ldr	r2, [pc, #120]	; (8000400 <peripherals_init+0xa8>)
 8000386:	f043 0308 	orr.w	r3, r3, #8
 800038a:	6313      	str	r3, [r2, #48]	; 0x30


	PIN_MODE(PORT_A, PIN10, OUTPUT);
 800038c:	2201      	movs	r2, #1
 800038e:	210a      	movs	r1, #10
 8000390:	2000      	movs	r0, #0
 8000392:	f7ff ff49 	bl	8000228 <PIN_MODE>
	PIN_MODE(PORT_B, PIN3, OUTPUT);
 8000396:	2201      	movs	r2, #1
 8000398:	2103      	movs	r1, #3
 800039a:	2001      	movs	r0, #1
 800039c:	f7ff ff44 	bl	8000228 <PIN_MODE>
	PIN_MODE(PORT_B, PIN5, OUTPUT);
 80003a0:	2201      	movs	r2, #1
 80003a2:	2105      	movs	r1, #5
 80003a4:	2001      	movs	r0, #1
 80003a6:	f7ff ff3f 	bl	8000228 <PIN_MODE>
	PIN_MODE(PORT_B, PIN4, OUTPUT);
 80003aa:	2201      	movs	r2, #1
 80003ac:	2104      	movs	r1, #4
 80003ae:	2001      	movs	r0, #1
 80003b0:	f7ff ff3a 	bl	8000228 <PIN_MODE>
	PIN_MODE(PORT_B, PIN10, OUTPUT);
 80003b4:	2201      	movs	r2, #1
 80003b6:	210a      	movs	r1, #10
 80003b8:	2001      	movs	r0, #1
 80003ba:	f7ff ff35 	bl	8000228 <PIN_MODE>
	PIN_MODE(PORT_A, PIN8, OUTPUT);
 80003be:	2201      	movs	r2, #1
 80003c0:	2108      	movs	r1, #8
 80003c2:	2000      	movs	r0, #0
 80003c4:	f7ff ff30 	bl	8000228 <PIN_MODE>
	PIN_MODE(PORT_A, PIN9, OUTPUT);
 80003c8:	2201      	movs	r2, #1
 80003ca:	2109      	movs	r1, #9
 80003cc:	2000      	movs	r0, #0
 80003ce:	f7ff ff2b 	bl	8000228 <PIN_MODE>
	PIN_MODE(PORT_C, PIN7, OUTPUT);
 80003d2:	2201      	movs	r2, #1
 80003d4:	2107      	movs	r1, #7
 80003d6:	2002      	movs	r0, #2
 80003d8:	f7ff ff26 	bl	8000228 <PIN_MODE>
	PIN_MODE(PORT_B, PIN6, OUTPUT);
 80003dc:	2201      	movs	r2, #1
 80003de:	2106      	movs	r1, #6
 80003e0:	2001      	movs	r0, #1
 80003e2:	f7ff ff21 	bl	8000228 <PIN_MODE>
	PIN_MODE(PORT_A, PIN7, OUTPUT);
 80003e6:	2201      	movs	r2, #1
 80003e8:	2107      	movs	r1, #7
 80003ea:	2000      	movs	r0, #0
 80003ec:	f7ff ff1c 	bl	8000228 <PIN_MODE>
	PIN_MODE(PORT_A, PIN6, OUTPUT);
 80003f0:	2201      	movs	r2, #1
 80003f2:	2106      	movs	r1, #6
 80003f4:	2000      	movs	r0, #0
 80003f6:	f7ff ff17 	bl	8000228 <PIN_MODE>

}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40023800 	.word	0x40023800

08000404 <send>:

void send(SIGNAL rs, uint8_t value)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	460a      	mov	r2, r1
 800040e:	71fb      	strb	r3, [r7, #7]
 8000410:	4613      	mov	r3, r2
 8000412:	71bb      	strb	r3, [r7, #6]
	LCD_RS(rs);
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	461a      	mov	r2, r3
 8000418:	210a      	movs	r1, #10
 800041a:	4833      	ldr	r0, [pc, #204]	; (80004e8 <send+0xe4>)
 800041c:	f7ff ff7c 	bl	8000318 <DIGITAL_WRITE>
	LCD_DB0((value >> 0)& 0x01);
 8000420:	79bb      	ldrb	r3, [r7, #6]
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	b2db      	uxtb	r3, r3
 8000428:	461a      	mov	r2, r3
 800042a:	2104      	movs	r1, #4
 800042c:	482f      	ldr	r0, [pc, #188]	; (80004ec <send+0xe8>)
 800042e:	f7ff ff73 	bl	8000318 <DIGITAL_WRITE>
	LCD_DB1((value >> 1)& 0x01);
 8000432:	79bb      	ldrb	r3, [r7, #6]
 8000434:	085b      	lsrs	r3, r3, #1
 8000436:	b2db      	uxtb	r3, r3
 8000438:	f003 0301 	and.w	r3, r3, #1
 800043c:	b2db      	uxtb	r3, r3
 800043e:	461a      	mov	r2, r3
 8000440:	210a      	movs	r1, #10
 8000442:	482a      	ldr	r0, [pc, #168]	; (80004ec <send+0xe8>)
 8000444:	f7ff ff68 	bl	8000318 <DIGITAL_WRITE>
	LCD_DB2((value >> 2)& 0x01);
 8000448:	79bb      	ldrb	r3, [r7, #6]
 800044a:	089b      	lsrs	r3, r3, #2
 800044c:	b2db      	uxtb	r3, r3
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	b2db      	uxtb	r3, r3
 8000454:	461a      	mov	r2, r3
 8000456:	2108      	movs	r1, #8
 8000458:	4823      	ldr	r0, [pc, #140]	; (80004e8 <send+0xe4>)
 800045a:	f7ff ff5d 	bl	8000318 <DIGITAL_WRITE>
	LCD_DB3((value >> 3)& 0x01);
 800045e:	79bb      	ldrb	r3, [r7, #6]
 8000460:	08db      	lsrs	r3, r3, #3
 8000462:	b2db      	uxtb	r3, r3
 8000464:	f003 0301 	and.w	r3, r3, #1
 8000468:	b2db      	uxtb	r3, r3
 800046a:	461a      	mov	r2, r3
 800046c:	2109      	movs	r1, #9
 800046e:	481e      	ldr	r0, [pc, #120]	; (80004e8 <send+0xe4>)
 8000470:	f7ff ff52 	bl	8000318 <DIGITAL_WRITE>
	LCD_DB4((value >> 4)& 0x01);
 8000474:	79bb      	ldrb	r3, [r7, #6]
 8000476:	091b      	lsrs	r3, r3, #4
 8000478:	b2db      	uxtb	r3, r3
 800047a:	f003 0301 	and.w	r3, r3, #1
 800047e:	b2db      	uxtb	r3, r3
 8000480:	461a      	mov	r2, r3
 8000482:	2107      	movs	r1, #7
 8000484:	481a      	ldr	r0, [pc, #104]	; (80004f0 <send+0xec>)
 8000486:	f7ff ff47 	bl	8000318 <DIGITAL_WRITE>
	LCD_DB5((value >> 5)& 0x01);
 800048a:	79bb      	ldrb	r3, [r7, #6]
 800048c:	095b      	lsrs	r3, r3, #5
 800048e:	b2db      	uxtb	r3, r3
 8000490:	f003 0301 	and.w	r3, r3, #1
 8000494:	b2db      	uxtb	r3, r3
 8000496:	461a      	mov	r2, r3
 8000498:	2106      	movs	r1, #6
 800049a:	4814      	ldr	r0, [pc, #80]	; (80004ec <send+0xe8>)
 800049c:	f7ff ff3c 	bl	8000318 <DIGITAL_WRITE>
	LCD_DB6((value >> 6)& 0x01);
 80004a0:	79bb      	ldrb	r3, [r7, #6]
 80004a2:	099b      	lsrs	r3, r3, #6
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	f003 0301 	and.w	r3, r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	461a      	mov	r2, r3
 80004ae:	2107      	movs	r1, #7
 80004b0:	480d      	ldr	r0, [pc, #52]	; (80004e8 <send+0xe4>)
 80004b2:	f7ff ff31 	bl	8000318 <DIGITAL_WRITE>
	LCD_DB7((value >> 7)& 0x01);
 80004b6:	79bb      	ldrb	r3, [r7, #6]
 80004b8:	09db      	lsrs	r3, r3, #7
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	461a      	mov	r2, r3
 80004be:	2106      	movs	r1, #6
 80004c0:	4809      	ldr	r0, [pc, #36]	; (80004e8 <send+0xe4>)
 80004c2:	f7ff ff29 	bl	8000318 <DIGITAL_WRITE>

	LCD_E(1);
 80004c6:	2201      	movs	r2, #1
 80004c8:	2105      	movs	r1, #5
 80004ca:	4808      	ldr	r0, [pc, #32]	; (80004ec <send+0xe8>)
 80004cc:	f7ff ff24 	bl	8000318 <DIGITAL_WRITE>
	LCD_E(0);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2105      	movs	r1, #5
 80004d4:	4805      	ldr	r0, [pc, #20]	; (80004ec <send+0xe8>)
 80004d6:	f7ff ff1f 	bl	8000318 <DIGITAL_WRITE>
	delay_ms(1);
 80004da:	2001      	movs	r0, #1
 80004dc:	f7ff fe7a 	bl	80001d4 <delay_ms>
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40020000 	.word	0x40020000
 80004ec:	40020400 	.word	0x40020400
 80004f0:	40020800 	.word	0x40020800

080004f4 <send_command>:

void send_command(uint8_t value)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
	send(LOW, value);
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	4619      	mov	r1, r3
 8000502:	2000      	movs	r0, #0
 8000504:	f7ff ff7e 	bl	8000404 <send>
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <send_data>:

void send_data(char *value)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	const char *ptr = value;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	60fb      	str	r3, [r7, #12]
	size_t index = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
	while(*ptr != '\0')
 8000520:	e00d      	b.n	800053e <send_data+0x2e>
	{
		send(HIGH, (uint8_t)value[index]);
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	4413      	add	r3, r2
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	4619      	mov	r1, r3
 800052c:	2001      	movs	r0, #1
 800052e:	f7ff ff69 	bl	8000404 <send>
		ptr++;
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	3301      	adds	r3, #1
 8000536:	60fb      	str	r3, [r7, #12]
		index++;
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	3301      	adds	r3, #1
 800053c:	60bb      	str	r3, [r7, #8]
	while(*ptr != '\0')
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d1ed      	bne.n	8000522 <send_data+0x12>
	}
}
 8000546:	bf00      	nop
 8000548:	bf00      	nop
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <set_cursor>:

void set_cursor(int row, int col)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
	int row1 = 0x00;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
	int row2 = 0x40;
 800055e:	2340      	movs	r3, #64	; 0x40
 8000560:	60bb      	str	r3, [r7, #8]
	switch(row)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d003      	beq.n	8000570 <set_cursor+0x20>
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2b02      	cmp	r3, #2
 800056c:	d00f      	beq.n	800058e <set_cursor+0x3e>
		break;
	case 2:
		send_command(0x80 | (row2 + col));
		break;
	}
}
 800056e:	e01d      	b.n	80005ac <set_cursor+0x5c>
		send_command(0x80 | (row1 + col));
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	b2da      	uxtb	r2, r3
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	b2db      	uxtb	r3, r3
 8000578:	4413      	add	r3, r2
 800057a:	b2db      	uxtb	r3, r3
 800057c:	b25b      	sxtb	r3, r3
 800057e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000582:	b25b      	sxtb	r3, r3
 8000584:	b2db      	uxtb	r3, r3
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff ffb4 	bl	80004f4 <send_command>
		break;
 800058c:	e00e      	b.n	80005ac <set_cursor+0x5c>
		send_command(0x80 | (row2 + col));
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	b2da      	uxtb	r2, r3
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4413      	add	r3, r2
 8000598:	b2db      	uxtb	r3, r3
 800059a:	b25b      	sxtb	r3, r3
 800059c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005a0:	b25b      	sxtb	r3, r3
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff ffa5 	bl	80004f4 <send_command>
		break;
 80005aa:	bf00      	nop
}
 80005ac:	bf00      	nop
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <clear_screen>:

void clear_screen()
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	send_command(0x01);
 80005b8:	2001      	movs	r0, #1
 80005ba:	f7ff ff9b 	bl	80004f4 <send_command>
	delay_ms(2);
 80005be:	2002      	movs	r0, #2
 80005c0:	f7ff fe08 	bl	80001d4 <delay_ms>
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <scroll_text>:
int max_x = 15;
int min_x = 0;
int direction = 0;

void scroll_text(char *text)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
		set_cursor(1,x_pos);
 80005d0:	4b20      	ldr	r3, [pc, #128]	; (8000654 <scroll_text+0x8c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	2001      	movs	r0, #1
 80005d8:	f7ff ffba 	bl	8000550 <set_cursor>
		clear_screen();
 80005dc:	f7ff ffea 	bl	80005b4 <clear_screen>
		set_cursor(1,x_pos);
 80005e0:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <scroll_text+0x8c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	2001      	movs	r0, #1
 80005e8:	f7ff ffb2 	bl	8000550 <set_cursor>
		send_data(text);
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f7ff ff8f 	bl	8000510 <send_data>
		direction == 0 ? ++x_pos : --x_pos;
 80005f2:	4b19      	ldr	r3, [pc, #100]	; (8000658 <scroll_text+0x90>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d105      	bne.n	8000606 <scroll_text+0x3e>
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <scroll_text+0x8c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	3301      	adds	r3, #1
 8000600:	4a14      	ldr	r2, [pc, #80]	; (8000654 <scroll_text+0x8c>)
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	e004      	b.n	8000610 <scroll_text+0x48>
 8000606:	4b13      	ldr	r3, [pc, #76]	; (8000654 <scroll_text+0x8c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	3b01      	subs	r3, #1
 800060c:	4a11      	ldr	r2, [pc, #68]	; (8000654 <scroll_text+0x8c>)
 800060e:	6013      	str	r3, [r2, #0]
		if(x_pos > max_x && direction == 0)
 8000610:	4b10      	ldr	r3, [pc, #64]	; (8000654 <scroll_text+0x8c>)
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <scroll_text+0x94>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	429a      	cmp	r2, r3
 800061a:	dd06      	ble.n	800062a <scroll_text+0x62>
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <scroll_text+0x90>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d102      	bne.n	800062a <scroll_text+0x62>
		{
			direction = 1;
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <scroll_text+0x90>)
 8000626:	2201      	movs	r2, #1
 8000628:	601a      	str	r2, [r3, #0]
		}
		if(x_pos < min_x && direction == 1)
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <scroll_text+0x8c>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <scroll_text+0x98>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	429a      	cmp	r2, r3
 8000634:	da06      	bge.n	8000644 <scroll_text+0x7c>
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <scroll_text+0x90>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d102      	bne.n	8000644 <scroll_text+0x7c>
		{
			direction = 0;
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <scroll_text+0x90>)
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
		}

		delay_ms(300);
 8000644:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000648:	f7ff fdc4 	bl	80001d4 <delay_ms>
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000000 	.word	0x20000000
 8000658:	20000028 	.word	0x20000028
 800065c:	20000004 	.word	0x20000004
 8000660:	20000024 	.word	0x20000024

08000664 <main>:

int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	peripherals_init();
 8000668:	f7ff fe76 	bl	8000358 <peripherals_init>

	delay_ms(100);
 800066c:	2064      	movs	r0, #100	; 0x64
 800066e:	f7ff fdb1 	bl	80001d4 <delay_ms>

	send_command(0x3C);
 8000672:	203c      	movs	r0, #60	; 0x3c
 8000674:	f7ff ff3e 	bl	80004f4 <send_command>
	send_command(0xE);
 8000678:	200e      	movs	r0, #14
 800067a:	f7ff ff3b 	bl	80004f4 <send_command>
	send_command(0x06);
 800067e:	2006      	movs	r0, #6
 8000680:	f7ff ff38 	bl	80004f4 <send_command>
	send_command(0x01);
 8000684:	2001      	movs	r0, #1
 8000686:	f7ff ff35 	bl	80004f4 <send_command>


	delay_ms(1);
 800068a:	2001      	movs	r0, #1
 800068c:	f7ff fda2 	bl	80001d4 <delay_ms>

//	set_cursor(1,-1);
//	send_data("Hello World");
	while(1)
	{
		 scroll_text("Happy New Year!");
 8000690:	4801      	ldr	r0, [pc, #4]	; (8000698 <main+0x34>)
 8000692:	f7ff ff99 	bl	80005c8 <scroll_text>
 8000696:	e7fb      	b.n	8000690 <main+0x2c>
 8000698:	08000750 	.word	0x08000750

0800069c <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 800069c:	480d      	ldr	r0, [pc, #52]	; (80006d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800069e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006a6:	490d      	ldr	r1, [pc, #52]	; (80006dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a8:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <LoopForever+0xe>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ac:	e002      	b.n	80006b4 <LoopCopyDataInit>

080006ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b2:	3304      	adds	r3, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b8:	d3f9      	bcc.n	80006ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ba:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006bc:	4c0a      	ldr	r4, [pc, #40]	; (80006e8 <LoopForever+0x16>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c0:	e001      	b.n	80006c6 <LoopFillZerobss>

080006c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c4:	3204      	adds	r2, #4

080006c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c8:	d3fb      	bcc.n	80006c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ca:	f000 f811 	bl	80006f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ce:	f7ff ffc9 	bl	8000664 <main>

080006d2 <LoopForever>:

LoopForever:
  b LoopForever
 80006d2:	e7fe      	b.n	80006d2 <LoopForever>
  ldr   r0, =_estack
 80006d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006dc:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80006e0:	08000768 	.word	0x08000768
  ldr r2, =_sbss
 80006e4:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80006e8:	2000002c 	.word	0x2000002c

080006ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ec:	e7fe      	b.n	80006ec <ADC_IRQHandler>
	...

080006f0 <__libc_init_array>:
 80006f0:	b570      	push	{r4, r5, r6, lr}
 80006f2:	4d0d      	ldr	r5, [pc, #52]	; (8000728 <__libc_init_array+0x38>)
 80006f4:	4c0d      	ldr	r4, [pc, #52]	; (800072c <__libc_init_array+0x3c>)
 80006f6:	1b64      	subs	r4, r4, r5
 80006f8:	10a4      	asrs	r4, r4, #2
 80006fa:	2600      	movs	r6, #0
 80006fc:	42a6      	cmp	r6, r4
 80006fe:	d109      	bne.n	8000714 <__libc_init_array+0x24>
 8000700:	4d0b      	ldr	r5, [pc, #44]	; (8000730 <__libc_init_array+0x40>)
 8000702:	4c0c      	ldr	r4, [pc, #48]	; (8000734 <__libc_init_array+0x44>)
 8000704:	f000 f818 	bl	8000738 <_init>
 8000708:	1b64      	subs	r4, r4, r5
 800070a:	10a4      	asrs	r4, r4, #2
 800070c:	2600      	movs	r6, #0
 800070e:	42a6      	cmp	r6, r4
 8000710:	d105      	bne.n	800071e <__libc_init_array+0x2e>
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f855 3b04 	ldr.w	r3, [r5], #4
 8000718:	4798      	blx	r3
 800071a:	3601      	adds	r6, #1
 800071c:	e7ee      	b.n	80006fc <__libc_init_array+0xc>
 800071e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000722:	4798      	blx	r3
 8000724:	3601      	adds	r6, #1
 8000726:	e7f2      	b.n	800070e <__libc_init_array+0x1e>
 8000728:	08000760 	.word	0x08000760
 800072c:	08000760 	.word	0x08000760
 8000730:	08000760 	.word	0x08000760
 8000734:	08000764 	.word	0x08000764

08000738 <_init>:
 8000738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073a:	bf00      	nop
 800073c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800073e:	bc08      	pop	{r3}
 8000740:	469e      	mov	lr, r3
 8000742:	4770      	bx	lr

08000744 <_fini>:
 8000744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000746:	bf00      	nop
 8000748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800074a:	bc08      	pop	{r3}
 800074c:	469e      	mov	lr, r3
 800074e:	4770      	bx	lr
